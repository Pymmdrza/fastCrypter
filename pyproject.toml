[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "fastcrypt"
version = "2.0.0"
description = "Professional compression and encryption library with native C/C++ acceleration"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Mmdrza", email = "pymmdrza@gmail.com"}
]
maintainers = [
    {name = "Mmdrza", email = "pymmdrza@gmail.com"}
]
keywords = [
    "encryption", "compression", "security", "cryptography",
    "aes", "chacha20", "rsa", "zlib", "lzma", "brotli",
    "native", "performance", "c++", "custom-encoding", "fast"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: C",
    "Programming Language :: C++",
    "Topic :: Security :: Cryptography",
    "Topic :: System :: Archiving :: Compression",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
]
requires-python = ">=3.8"
dependencies = [
    "cryptography>=41.0.0",
    "pycryptodome>=3.19.0",
    "brotli>=1.1.0",
    "argon2-cffi>=23.1.0",
    "bcrypt>=4.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-benchmark>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]
native = [
    "numpy>=1.24.0",
    "cython>=3.0.0",
]
all = [
    "fastcrypt[dev,docs,native]"
]

[project.urls]
Homepage = "https://github.com/Pymmdrza/fastcrypt"
Documentation = "https://fastcrypt.readthedocs.io/"
Repository = "https://github.com/Pymmdrza/fastcrypt.git"
"Bug Reports" = "https://github.com/Pymmdrza/fastcrypt/issues"
Changelog = "https://github.com/Pymmdrza/fastcrypt/blob/main/CHANGELOG.md"

[project.scripts]
fastcrypt = "fastcrypt.cli:main"

[tool.setuptools]
packages = ["fastcrypt"]
include-package-data = true

[tool.setuptools.package-data]
fastcrypt = [
    "native/libs/*/*.so",
    "native/libs/*/*.dll", 
    "native/libs/*/*.dylib",
    "*.md",
]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["fastcrypt"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    ".tox",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "Crypto.*",
    "brotli",
    "argon2",
    "bcrypt",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "native: marks tests that require native libraries",
]

[tool.coverage.run]
source = ["fastcrypt"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "build_native.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 